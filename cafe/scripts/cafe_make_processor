#!/bin/sh
#
# Create the boiler-plate code for a Processor
# implementation.
#

usage()
{
    echo "usage: `basename $0` <package> <processor>"
}

if [ $# -ne 2 ]; then
    usage
    exit 1
fi

if [ ! -d $1 ]; then
    usage
    exit 1
fi

if [ -f $1/$1/${2}.h ]; then
    echo "Processor already exists ?"
    exit 1
fi

[ -d ${1}/scripts ] || mkdir -p ${1}/scripts

cat >${1}/${1}/${2}.h <<EOF
#ifndef ${1}_${2}_H_
#define ${1}_${2}_H_

#include "cafe/Processor.h"

class ${2} : public cafe::Processor {
public:
  ${2}(const char *name);
  bool processEvent(xAOD::TEvent& event);
private:
public:
  ClassDef(${2},0);
};

#endif // ${1}_${2}_H_
EOF

cat >${1}/Root/${2}.cxx <<EOF

#include "${1}/${2}.h"
#include "xAODRootAccess/TEvent.h"


${2}::${2}(const char *name)
    : cafe::Processor(name)
{
}

bool ${2}::processEvent(xAOD::TEvent& event)
{
  return true;
}

ClassImp($2);

EOF

if [ -f ${1}/Root/LinkDef.h ]; then
  cat > ${1}/Root/LinkDef.h.new  <<EOF
#include "${1}/${2}.h"
EOF
  cat  ${1}/Root/LinkDef.h >> ${1}/Root/LinkDef.h.new
  cat >> ${1}/Root/LinkDef.h.new  <<EOF

#ifdef __CINT__
#pragma link C++ class ${2}+;
#endif
EOF
else
  cat > ${1}/Root/LinkDef.h.new  <<EOF
#include "${1}/${2}.h"
#ifdef __CINT__
#pragma link C++ class ${2}+;
#endif
EOF
fi
mv ${1}/Root/LinkDef.h.new ${1}/Root/LinkDef.h
